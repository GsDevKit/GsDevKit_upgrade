#!/usr/bin/env superdoit_solo
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'gemstone' default: '$GEMSTONE'.
	SuperDoitOptionalOptionWithRequiredArg long: 'upgradeLogDir' default: '$upgradeLogDir'.

	SuperDoitOptionalOptionWithRequiredArg long: 'stoneName' short: 's' default: 'gs64stone'.
	SuperDoitOptionalOptionWithRequiredArg long: 'userName' short: 'u' default: 'DataCurator'.
	SuperDoitOptionalOptionWithRequiredArg long: 'password' short: 'p' default: 'swordfish'.
	SuperDoitOptionalOptionWithRequiredArg long: 'tempObjCache' short: 'c' default: '100000'.
	SuperDoitOptionalOptionWithRequiredArg long: 'upgradeInstance' short: 'P' default: '$GEMSTONE/upgrade/createGsDevKit_upgrade.topaz'.

	SuperDoitOptionalOptionWithNoArg long: 'debugGem' short: 'W'.
	SuperDoitOptionalOptionWithNoArg long: 'upgradeImage'.
}
%
instvars
gemstone
upgradeLogDir
%
usage
-----
USAGE 
  $basename [--help | -h] [--debug | -D]

DESCRIPTION
  Driver script for full upgrade of GLASS/GsDevKit image.

  1. install GsDevKit_upgrade into image as SystemUser
  2. As <seaside-user>, GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_user
  3. As SystemUser, GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_systemuser
  4. As <seaside-user>, GsuAbstractGsDevKitUpgrade>>prepareImage_user and GsuAbstractGsDevKitUpgrade>>prepareGsDevKitImage
  5. As SystemUser, Remove  globals created during upgrade

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -D
  $basename -D --upgradeImage --upgradeLogDir=./upgradeLog -s battery_k
-----
%
SPECS
[
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
method
resolveEnvVars
	gemstone := self gemstone
		ifNotNil: [:value |
			| expanded |
			expanded := value asFileReference pathString.
			System gemEnvironmentVariable: 'GEMSTONE' put: expanded ]
		ifNil: [ self error: '$GEMSTONE or --gemstone required' ].
	self upgradeLogDir
		ifNotNil: [:value |
			upgradeLogDir := value asFileReference.
			upgradeLogDir exists
				ifFalse: [ self error: 'The upgradeLogDir: ', upgradeLogDir pathString , ' does not exist.' ]. 
			System gemEnvironmentVariable: 'upgradeLogDir' put: upgradeLogDir pathString.]
		ifNil: [ self error: '$upgradeLogDir or --upgradeLogDir required' ].
%
method
upgradeImagePrompt
	^ '=========================
Starting GemStone/S 64 3.x kernel class filein.

Note: All user defined changes and additions to kernel classes will be
removed. It is therefore advised that all such changes be filed out before
starting conversion and filed back in after conversion is complete. Layered
products which change the kernel classes, such as GemConnect, will also lose
the changes. All such products must be reinstalled following the upgrade.

Stone name is $stoneName.
=========================

Press the return key to continue...
' copyReplaceAll: '$stoneName' with: self stoneName
%
method
upgradeSeasideImagePrompt
	^('=========================
Starting GemStone/S 64 3.x Seaside image upgrade.

Note:	This script should be run AFTER upgradeImage has been run.
			SessionMethods will be enabled and all code included in the 
			GLASS, GLASS1 or tODE project will be reloaded.
		
			There are 5 phases performed by this script and each script is 
			performed in its own topaz session:

			1. As SystemUser, install GsDevKit_upgrade code and 
					GsuAbstractGsDevKitUpgrade>>prepareImage. 
			2. As $username, GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_user 
			3. As SystemUser, GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_systemuser
			4. As $username, GsuAbstractGsDevKitUpgrade>>prepareImage_user and 
					GsuAbstractGsDevKitUpgrade>>prepareGsDevKitImage
			5. As SystemUser, Remove globals created during upgrade

			For additional details about the work performed during each phase see
			https://github.com/GsDevKit/GsDevKit_upgrade .
	
Stone name is $stoneName.
=========================

Press the return key to continue...
'
	copyReplaceAll: '$username' with: self userName)
	copyReplaceAll: '$stoneName' with: self stoneName
%
method
displayPromptAndWait: scriptPrompt
	self stdout nextPutAll:scriptPrompt.
	GsFile stdin next
%
method
bannerLog: message
	self stdout
		nextPutAll: '======';
		lf;
		nextPutAll: message;
		lf;
		nextPutAll: '======';
		lf
%
method
logChildError: childError message: message
	"dump stack if a childError occurs, to add in debugging."

	| listenForDebug |
	childError messageText.	"prime the details ... don't want exception class, etc."
	self stdout
		nextPutAll: '---------------------';
		lf;
		nextPutAll: message;
		lf;
		nextPutAll: '---------------------';
		lf;
		nextPutAll: childError details;
		lf;
		nextPutAll: '---------------------';
		lf.
	listenForDebug := (System gemConfigurationAt: 'GEM_LISTEN_FOR_DEBUG') == true.
	listenForDebug
		ifTrue: [ 
			self stdout
				nextPutAll: (GsProcess stackReportToLevel: 300);
				lf;
				nextPutAll: '---------------------';
				lf;
				nextPutAll: 'GsProcess @' , GsProcess _current asOop printString;
				yourself.
			listenForDebug
				ifTrue: [ 
					self _stdout
						nextPutAll:
							' (DEBUGGEM ' , (System gemVersionReport at: 'processId') asString , ')' ].
			self stdout
				lf;
				nextPutAll: '---------------------';
				lf ]
		ifFalse: [
			]
%
method
executeCommand: commandLine withInput: stdinStringOrNil withOutputFile: redirectPathString commandName: commandName
	self stdout
		lf;
		nextPutAll:
				'======  invoking ' , commandLine printString , ' to ' , redirectPathString
						, ' @ ' , DateAndTime now printString;
		lf;
		nextPutAll: '****************************************';
		lf.
	[ 
	GsHostProcess new
		commandLine: commandLine;
		appendToFiles: true;
		stderrPath: redirectPathString;
		stdoutPath: redirectPathString;
		executeWithInput: stdinStringOrNil ]
		on: ChildError
		do: [ :ex | 
			self
				logChildError: ex
				message: 'Unhandled Error in upgradeSeasideImage.solo script: ' , commandLine, '. See ', redirectPathString, ' for details'.
			self
				error:
					'The command ' , commandName , ' exited with status ' , ex status printString ]
%
method
waitForStone: stoneName
	"see if stone is running and do not wait"
	[(Rowan globalNamed: 'GsWaitStone') waitForStoneName: stoneName timeout: -1] 
		on: ChildError
		do: [:ex | 
			| exitMessage exitStatus |
			exitStatus := ex status.
			exitMessage := exitStatus = 1
				ifTrue: [ 
					'Stone ' , stoneName
						, ' is already servicing the maximum number of sessions' ]
				ifFalse: [ 
					exitStatus = 2
						ifTrue: [ 
							'Stone ' , stoneName
								, ' is rejecting connections during startup or shutdown' ]
						ifFalse: [ 'Stone ' , stoneName , ' was not found' ] ].
			self stdout nextPutAll: exitMessage; lf.
			"does not return"
			self exit: exitMessage withStatus: 1 ] 
%
method
seasideUserTopaziniFile
	^ upgradeLogDir / 'topazini_SeasideUser'
%
method
systemUserTopaziniFile
	^ upgradeLogDir / 'topazini_SystemUser'
%
method
createTopaziniFiles
	| topaziniFile |
	"Create two topazini files. One for SystemUser and one for seaside user"
	topaziniFile := self systemUserTopaziniFile.
	topaziniFile exists
		ifFalse: [ 
			topaziniFile
				writeStreamDo: [ :fileStream | 
					fileStream
						nextPutAll: 'set gemstone ' , self stoneName; lf;
						nextPutAll: 'set user SystemUser'; lf;
						nextPutAll: 'set password swordfish'; lf ] ].
	topaziniFile := self seasideUserTopaziniFile.
	topaziniFile exists
		ifFalse: [ 
			topaziniFile
				writeStreamDo: [ :fileStream | 
					fileStream
						nextPutAll: 'set gemstone ' , self stoneName; lf;
						nextPutAll: 'set user ', self userName; lf;
						nextPutAll: 'set password ', self password; lf ] ].	
%
method
gemstoneUpgradeImage
	| commandString scriptName commandName |
	commandName := '$GEMSTONE/bin/upgradeImage'.
	scriptName := commandName asFileReference pathString.
	commandString := String new.
	commandString 
		add: scriptName ;
		add: ' -c ', self tempObjCache, ' -s ', self stoneName;
		yourself.
	self displayPromptAndWait: self upgradeImagePrompt.
	self bannerLog: '	start $GEMSTONE/bin/upgradeImage '.
	self
		executeCommand: commandString
		withInput: (String with: Character lf)
		withOutputFile: (upgradeLogDir / 'upgradeImage.log') pathString
		commandName: commandName.
	self bannerLog: '	finish $GEMSTONE/bin/upgradeImage'.
%
method
upgradeSeasideImage_system_user: logFile step: stepNumber
	"driver .stone script for running SystemUser tasks"
	| scriptName commandName commandString |
	commandName := 'upgradeSeasideImage_system_user.stone'.
	scriptName := (self dirname / commandName) pathString.
	self bannerLog: '	start ', scriptName.
	
	commandString := String new.
	commandString 
		add: scriptName ;
		add: ' --seasideUserName=', self userName;
		add: ' --step', stepNumber; 
		add: ' -- -I ' , self systemUserTopaziniFile pathString;
		yourself.
	self debugGem
		ifTrue: [ commandString add: ' -C "GEM_LISTEN_FOR_DEBUG=TRUE;"' ].

	self
		executeCommand: commandString
			withInput: (String with: Character lf)
			withOutputFile: logFile
			commandName: commandName.

	self bannerLog: '	finish ', scriptName.
%
method
upgradeSeasideImage_seaside_user: logFile step: stepNumber
	"driver .stone script for running <seaside-user> tasks"
	| scriptName commandName commandString |
	commandName := 'upgradeSeasideImage_seaside_user.stone'.
	scriptName := (self dirname / commandName) pathString.
	self bannerLog: '	start ', scriptName.
	
	commandString := String new.
	commandString 
		add: scriptName;
		add: ' --step', stepNumber; 
		add: ' -- -I ' , self seasideUserTopaziniFile pathString;
		yourself.
	self debugGem
		ifTrue: [ commandString add: ' -C "GEM_LISTEN_FOR_DEBUG=TRUE;"' ].
	self
		executeCommand: commandString
			withInput: (String with: Character lf)
			withOutputFile: logFile
			commandName: commandName.
	self bannerLog: '	finish ', scriptName.
%
doit
	| logFile instanceFile |
	self bannerLog: 'Running ----- ', self basename.
	self resolveEnvVars.
	self createTopaziniFiles.
	self preDoitSpecLoad: [:spec | spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ].
	self waitForStone: self stoneName.
	self upgradeImage
		ifTrue: [
			self bannerLog: 'Perform upgradeImage'. 
			self gemstoneUpgradeImage ]
		ifFalse: [ self bannerLog: 'Skipping upgradeImage' ].
	instanceFile := self upgradeInstance asFileReference.
	instanceFile copyTo: self upgradeLogDir asFileReference / instanceFile basename.
	self displayPromptAndWait: self upgradeSeasideImagePrompt.
"EXPECT extent0.dbf to be copied to stone and that startStone has been run"
	logFile := upgradeLogDir / 'upgradeSeasideImage.out'.
	logFile writeStreamDo: [:logStream | 
		"upgradeSeasideImage.out should all of the relevant information including the prompt"
		logStream nextPutAll: self upgradeSeasideImagePrompt; lf ].
	logFile := logFile pathString.
	self upgradeSeasideImage_system_user: logFile step: '1'.	"Step 1. As SystemUser, install GsDevKit_upgrade code and GsuAbstractGsDevKitUpgrade>>prepareImage."
	self upgradeSeasideImage_seaside_user: logFile step: '2'. "As <seaside-user>, GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_user"
	self upgradeSeasideImage_system_user: logFile step: '3'.	"Step 3. As SystemUser, GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_systemuser"
	self upgradeSeasideImage_seaside_user: logFile step: '4'.	"4. As <seaside-user>, GsuAbstractGsDevKitUpgrade>>prepareImage_user and GsuAbstractGsDevKitUpgrade>>prepareGsDevKitImage"
	self upgradeSeasideImage_system_user: logFile step: '5'.	"Step 5. As SystemUser, Remove globals created during upgrade"
	self bannerLog: 'Finished ----- ', self basename.
	self bannerLog: 'upgradeSeasideImage is complete'.
	^ self noResult
%
