#!/usr/bin/env superdoit_stone
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'seasideUserName'.

	SuperDoitOptionalOptionWithNoArg long: 'step1'.
	SuperDoitOptionalOptionWithNoArg long: 'step3'.
}
%
usage
-----
USAGE 
  $basename [--help | -h] [--debug | -D]

DESCRIPTION
  Step 1 of upgradeSeasideImage process: install GsDevKit_upgrade into image as SystemUser

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -D
  $basename
-----
%
method
bannerLog: message
	self stdout
		nextPutAll: '======';
		lf;
		nextPutAll: message;
		lf;
		nextPutAll: '======';
		lf
%
method
logAndWaitForDebug: ex
	| listenForDebug loop |
	listenForDebug := (System gemConfigurationAt: 'GEM_LISTEN_FOR_DEBUG') == true.
	listenForDebug
		ifTrue: [ 
			ex messageText.	"prime the details ... don't want exception class, etc."
			self stdout
				nextPutAll: '---------------------';
				lf;
				nextPutAll: ex details;
				lf;
				nextPutAll: '---------------------';
				lf;
				nextPutAll: (GsProcess stackReportToLevel: 300);
				lf;
				nextPutAll: '---------------------';
				lf;
				nextPutAll: 'GsProcess @' , GsProcess _current asOop printString;
				yourself.
			listenForDebug
				ifTrue: [ 
					self stdout
						nextPutAll:
							' (DEBUGGEM ' , (System gemVersionReport at: 'processId') asString , ')' ].
			self stdout
				lf;
				nextPutAll: '---------------------';
				lf ].
	loop := true.
	[
		[ loop ] whileTrue: [
			"loop waiting for DEBUGGEM to attach"
			(Delay forSeconds: 1) wait ]
	] on: Break do: [:br | 
		"stop looping if DEBUGGEM attach has occured (soft break)"
		loop := false. br pass ]
%
method
installGsDevKit_upgrade
	| symbolName session symbolList symbolDict dictName symDictSlot |
	dictName := 'GsDevKit_Upgrade_SymDict_private'.
	symbolName := dictName asSymbol.
	session := GsCurrentSession currentSession.
	symbolList := session symbolList.
	symbolDict := symbolList
		detect: [ :each | (each at: symbolName ifAbsent: [ nil ]) == each ]
		ifNone: [ 
			| newDict |
			newDict := SymbolDictionary new
				name: symbolName;
				objectSecurityPolicy: symbolList objectSecurityPolicy;
				yourself.
			symDictSlot := System myUserProfile symbolList size.
			System myUserProfile insertDictionary: newDict at: symDictSlot + 1.
			newDict ].
	UserGlobals at: symbolName put: symbolDict.
	System commit.

	GsFileIn fromServerPath: '$upgradeDir/GsDevKit_upgrade.gs'.

	(symbolDict at: #'GsuAbstractGsDevKitUpgrade') _symbolDictionary: symbolDict.
	UserGlobals removeKey: symbolName.
	System commit.

	GsFileIn fromServerPath: '$upgradeLogDir/createGsDevKit_upgrade.topaz'.

	System myUserProfile removeDictionaryAt: (System myUserProfile symbolList size).
	System commit.
%
method
doStep1
	self bannerLog: '1. As ', System myUserProfile userId, ', install GsDevKit_upgrade code and GsuAbstractGsDevKitUpgrade>>prepareImage.'.
	System myUserProfile userId = 'SystemUser'
		ifFalse: [ self error: self basename, ' is expected to be run as SystemUser' ].
	UserGlobals 
		at: #SeasideUpgradeUser 
		put: self seasideUserName.
	self installGsDevKit_upgrade.
	(GsCurrentSession currentSession objectNamed: 'GsDevKit_Image_Upgrade') prepareImage.
	UserGlobals removeKey: #SeasideUpgradeUser.
	System commit.
	self bannerLog: 'Finished Step 1. ----- ', self basename.
	^ self noResult
%
method
doStep3
	self bannerLog: '3. As ', System myUserProfile userId, ', GsuAbstractGsDevKitUpgrade>>prepareImage_pragma_systemuser'.
	System myUserProfile userId = 'SystemUser'
		ifFalse: [ self error: self basename, ' is expected to be run as SystemUser' ].
	(GsCurrentSession currentSession objectNamed: 'GsDevKit_Image_Upgrade') prepareImage_pragma_systemuser.
	System commit.
	self bannerLog: 'Finished Step 3. ----- ', self basename.
	^ self noResult
%
doit
	self bannerLog: 'Running ----- ', self basename.
	[
		self step1 ifTrue: [ ^ self doStep1 ].
		self step3 ifTrue: [ ^ self doStep3 ].
		self error: 'Expected option --step1 or --step3'
	] on: Error, Halt
		do: [:ex | 
			(System gemConfigurationAt: 'GEM_LISTEN_FOR_DEBUG') == false
				ifTrue: [ ex pass ].
			self logAndWaitForDebug: ex ].
%
